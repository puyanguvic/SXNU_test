```markdown
### 1. 递归算法求二叉树深度

**算法思想**  
递归求解二叉树深度的思路是利用树的层次结构逐层向下递归查找每个节点的左右子树深度。具体步骤如下：
1. 如果二叉树为空（即节点为空），则深度为 0。
2. 如果二叉树不为空，则递归求取左子树和右子树的深度。
3. 二叉树的深度为左右子树深度的最大值加 1（因为根节点自身也算一层）。

这种递归方法的时间复杂度是 O(n)，其中 n 是节点的个数，因为每个节点都被访问一次。

**代码实现**

```c
// 定义二叉树节点结构
typedef struct TreeNode {
    int value;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// 递归计算二叉树的深度
int treeDepth(TreeNode* root) {
    // 如果节点为空，深度为0
    if (root == NULL) {
        return 0;
    }
    // 递归计算左子树和右子树的深度
    int leftDepth = treeDepth(root->left);
    int rightDepth = treeDepth(root->right);
    // 当前树的深度为左右子树深度的最大值加1
    return (leftDepth > rightDepth ? leftDepth : rightDepth) + 1;
}
```

---

### 2. 带头节点的双向循环链表改造

**算法思想**  
问题理解：将链表 \( L = (a_1, a_2, \dots, a_n) \) 改造成特定的排列 `(a1, a1, ..., an, ..., a4, a2)`，即第一个元素放在列表前面两次，其余元素按逆序排列在列表之后。

具体步骤如下：
1. **Step 1**：复制第一个节点的值并插入到头节点之后。
2. **Step 2**：倒序排列链表的其他元素。通过从链表尾部遍历，将每个节点重新插入到头节点之后，直到达到所需的序列顺序。
3. **边界条件**：  
   - 空链表：直接返回，因为没有节点。
   - 单节点：直接添加一个节点复制即可。

**代码实现**

```c
struct DuLNode {
    ElemType elem;
    struct DuLNode* prior;
    struct DuLNode* next;
};

void transformList(struct DuLNode* head) {
    if (head->next == head) return; // 空链表

    struct DuLNode* firstNode = head->next;

    // Step 1: 复制第一个节点值并插入到头节点后
    insertAfterHead(head, firstNode->elem);

    // Step 2: 倒序其余节点
    struct DuLNode* current = head->prior; // 从尾节点开始
    while (current != firstNode && current != head) {
        struct DuLNode* priorNode = current->prior;

        // 将current移动到头节点后
        current->prior->next = current->next;
        current->next->prior = current->prior;

        current->next = head->next;
        current->prior = head;
        head->next->prior = current;
        head->next = current;

        current = priorNode;
    }
}
```
```
